# Multi-stage Dockerfile for my_steel robot deployment on Raspberry Pi 4B
# Optimized for ARM64 architecture with ROS2 Humble
# Build version: 2025-10-16 (includes micro_ros_agent from source)

# ============================================================================
# Stage 1: Builder - Compile ROS2 workspace
# ============================================================================
FROM ros:humble-ros-base AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-pip \
    build-essential \
    cmake \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create workspace
WORKDIR /ros2_ws

# Copy source code
COPY src/ src/

# Initialize rosdep if not already done
RUN rosdep update || true

# Install dependencies for the packages we're building
# Install ros2_control and controllers for robot_hardware_interfaces
RUN apt-get update && apt-get install -y \
    ros-humble-controller-interface \
    ros-humble-hardware-interface \
    ros-humble-ros2-control \
    ros-humble-ros2-controllers \
    ros-humble-moveit-msgs \
    ros-humble-robot-localization \
    && rm -rf /var/lib/apt/lists/*

# Skip rosdeps that fail to resolve for arm64 cross builds
RUN apt-get update && \
    rosdep install --from-paths src \
    --ignore-src \
    --rosdistro humble \
    --skip-keys "dynamixel_hardware_interface laser_filters xacro gazebo_ros gazebo_ros2_control" \
    -y && \
    rm -rf /var/lib/apt/lists/*

# Build packages in multiple steps to handle dependencies correctly
# Note: micro_ros_agent will be built from source in src/micro-ROS-Agent

RUN . /opt/ros/humble/setup.sh && \
    echo "=== Listing all packages ===" && \
    colcon list --base-paths src && \
    echo "=== Building micro_ros_agent ===" && \
    colcon build \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --merge-install

# Step 2: Build husarion components (base dependency)
RUN . /opt/ros/humble/setup.sh && \
    colcon build \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --packages-select husarion_components_description \
    --merge-install \
    --continue-on-error

# Step 3: Build open_manipulator_x packages (dependency for robot_description)
RUN . /opt/ros/humble/setup.sh && \
    colcon build \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --packages-select \
    open_manipulator_x_description \
    --merge-install \
    --continue-on-error

# Step 4: Build robot core packages
RUN . /opt/ros/humble/setup.sh && \
    colcon build \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --packages-select \
    robot_description \
    robot_hardware_interfaces \
    --merge-install

# Step 5: Build robot_utils (dependency for robot_controller)
RUN . /opt/ros/humble/setup.sh && \
    colcon build \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --packages-select robot_utils \
    --merge-install \
    --continue-on-error

# Step 6: Build controller and localization packages
RUN . /opt/ros/humble/setup.sh && \
    colcon build \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --packages-select \
    robot_controller \
    --merge-install

# Step 7: Build bringup package (depends on everything else)
RUN . /opt/ros/humble/setup.sh && \
    colcon build \
    --cmake-args -DCMAKE_BUILD_TYPE=Release \
    --packages-select robot_bringup \
    --merge-install

# ============================================================================
# Stage 2: Runtime - Production image
# ============================================================================
FROM ros:humble-ros-base

# Install runtime dependencies and system tools
RUN apt-get update && apt-get install -y \
    ros-humble-usb-cam \
    ros-humble-foxglove-bridge \
    ros-humble-robot-state-publisher \
    ros-humble-joint-state-publisher \
    ros-humble-controller-manager \
    ros-humble-ros2-control \
    udev \
    usbutils \
    curl \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# Install Tailscale
RUN curl -fsSL https://tailscale.com/install.sh | sh

# Create non-root robot user with necessary group memberships
RUN useradd -m -s /bin/bash robot && \
    usermod -aG dialout,video robot

# Copy built workspace from builder stage
COPY --from=builder /ros2_ws/install /ros2_ws/install

# Create Tailscale startup script (runs only when credentials are provided)
RUN mkdir -p /usr/local/bin && \
    cat <<'EOF' >/usr/local/bin/tailscale-start.sh
#!/bin/bash
set -euo pipefail

# Skip when no auth key or when running as non-root (tailscale needs CAP_SYS_ADMIN)
if [ -z "${TAILSCALE_AUTHKEY:-}" ]; then
  echo "[tailscale] No auth key provided, skipping Tailscale setup"
  exit 0
fi

if [ "$(id -u)" -ne 0 ]; then
  echo "[tailscale] Not running as root, skipping Tailscale setup"
  exit 0
fi

echo "[tailscale] Starting tailscaled daemon..."
mkdir -p /var/lib/tailscale
tailscaled --state=/var/lib/tailscale/tailscaled.state >/var/log/robot/tailscaled.log 2>&1 &

# Give the daemon a moment to come up
for _ in $(seq 1 10); do
  if tailscale status >/dev/null 2>&1; then
    break
  fi
  sleep 1
done

echo "[tailscale] Bringing interface up..."
tailscale up \
  --authkey="${TAILSCALE_AUTHKEY}" \
  --hostname="${TAILSCALE_HOSTNAME:-robot-xl}" \
  ${TAILSCALE_SUBNET_ROUTES:+--advertise-routes="${TAILSCALE_SUBNET_ROUTES}"} \
  --accept-routes \
  --reset

echo "[tailscale] Connected"
EOF

RUN chmod +x /usr/local/bin/tailscale-start.sh

# Create entrypoint script with ROS environment setup and graceful shutdown
RUN cat <<'EOF' >/usr/local/bin/entrypoint.sh
#!/bin/bash
set -euo pipefail

shutdown_handler() {
  echo "[entrypoint] Received termination signal, stopping child process..."
  if [ -n "${CHILD_PID:-}" ] && kill -0 "${CHILD_PID}" 2>/dev/null; then
    kill -TERM "${CHILD_PID}" 2>/dev/null || true
    wait "${CHILD_PID}" 2>/dev/null || true
  fi
  echo "[entrypoint] Shutdown complete"
  exit 0
}

trap shutdown_handler SIGINT SIGTERM

echo "[entrypoint] Sourcing ROS environments"
source /opt/ros/humble/setup.bash
if [ -f /ros2_ws/install/setup.bash ]; then
  source /ros2_ws/install/setup.bash
fi

# Start Tailscale when possible (runs as background task)
/usr/local/bin/tailscale-start.sh || true

echo "[entrypoint] Executing command: $*"
exec "$@"
EOF

# Make entrypoint executable
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set working directory
WORKDIR /ros2_ws

# Create log directory
RUN mkdir -p /var/log/robot && \
    chown -R robot:robot /var/log/robot

# Switch to non-root user for runtime
USER robot

# Set environment variables
ENV ROS_DISTRO=humble
ENV ROS_DOMAIN_ID=0
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp
ENV ROS_LOG_DIR=/var/log/robot
ENV ROBOT_MODEL_NAME=robot_xl

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Default command (can be overridden)
CMD ["bash"]
